import random
import hashlib
import sqlite3
from flask import Flask, request, jsonify, render_template

app = Flask(__name__)

DB_PATH = "cat_language.db"

def init_db():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î.
    """
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS translations (
            text TEXT PRIMARY KEY, 
            cat_hash TEXT UNIQUE
        )
    """)
    conn.commit()
    conn.close()

init_db()  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞

def generate_cat_hash(text, max_sounds=70):
    """
    –ì–µ–Ω–µ—Ä—É—î "–∫–æ—Ç—è—á–∏–π —Ö–µ—à" –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
    """
    words = text.lower().split()
    num_sounds = min(len(words), max_sounds)  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ç—è—á–∏—Ö —Å–ª—ñ–≤ = –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 70
    
    # –í–∞—Ä—ñ–∞—Ü—ñ—ó –∫–æ—Ç—è—á–∏—Ö –∑–≤—É–∫—ñ–≤
    meow_variants = ["meow", "meoow", "meooow", "meeow", "mmeeoww"]
    purr_variants = ["purr", "purrr", "purrrr"]
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à
    hash_value = hashlib.md5(text.encode()).hexdigest()
    random.seed(int(hash_value, 16))  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ random –¥–ª—è –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ—Å—Ç—ñ
    
    cat_hash = []
    for i in range(num_sounds):
        if random.random() < 0.15:  # 15% —à–∞–Ω—Å –≤—Å—Ç–∞–≤–∏—Ç–∏ purr
            cat_hash.append(random.choice(purr_variants))
        else:
            cat_hash.append(random.choice(meow_variants))
    
    return " ".join(cat_hash)

def save_to_db(text, cat_hash):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ç–µ–∫—Å—Ç —Ç–∞ –π–æ–≥–æ –∫–æ—Ç—è—á–∏–π —Ö–µ—à —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
    """
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO translations (text, cat_hash) VALUES (?, ?) ON CONFLICT(text) DO NOTHING", (text, cat_hash))
        conn.commit()
        print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î: {text} ‚Üí {cat_hash}")
    except sqlite3.Error as e:
        print(f"üö® –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ë–î: {e}")
    conn.close()

def translate_from_cat(cat_hash):
    """
    –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –∫–æ—Ç—è—á–∏–π —Ö–µ—à –Ω–∞–∑–∞–¥ —É —Ç–µ–∫—Å—Ç, —è–∫—â–æ –≤—ñ–Ω —î —É –±–∞–∑—ñ.
    """
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT text FROM translations WHERE cat_hash = ?", (cat_hash,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        print(f"üîÅ –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ –Ω–∞–∑–∞–¥: {cat_hash} ‚Üí {result[0]}")
        return result[0]
    else:
        print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É –¥–ª—è: {cat_hash}")
        return "Sorry, I don't understand"

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/translate", methods=["POST"])
def translate():
    data = request.json
    text = data.get("text", "").strip()
    cat_hash = data.get("cat_hash", "").strip()
    
    if text:
        cat_hash = generate_cat_hash(text, max_sounds=70)
        save_to_db(text, cat_hash)
        return jsonify({"original": text, "cat_hash": cat_hash})
    elif cat_hash:
        translation = translate_from_cat(cat_hash)
        return jsonify({"cat_hash": cat_hash, "translation": translation})
    else:
        return jsonify({"error": "Invalid input"}), 400

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
